<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>CMPUT 402 - individual</title><link href="https://cmput402.github.io/" rel="alternate"></link><link href="https://cmput402.github.io/feeds/individual.atom.xml" rel="self"></link><id>https://cmput402.github.io/</id><updated>2024-02-29T00:00:00-07:00</updated><subtitle>Software Quality</subtitle><entry><title>Graduate Assignment: Research Presentation</title><link href="https://cmput402.github.io/individual/research-presentation.html" rel="alternate"></link><published>2024-02-29T00:00:00-07:00</published><updated>2024-02-29T00:00:00-07:00</updated><author><name>Hazel Victoria Campbell</name></author><id>tag:cmput402.github.io,2024-02-29:/individual/research-presentation.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#marking"&gt;Marking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="overview"&gt;Overview&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;This assignment is for graduate students (CMPUT 501) only. CMPUT 402 students do not complete this assignment.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The goal of this assignment is to read, understand, and present recent research related to the QA topics we've covered in class.&lt;/p&gt;
&lt;h3 id="requirements"&gt;Requirements&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Choose a recent full length conference â€¦&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#marking"&gt;Marking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="overview"&gt;Overview&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;This assignment is for graduate students (CMPUT 501) only. CMPUT 402 students do not complete this assignment.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The goal of this assignment is to read, understand, and present recent research related to the QA topics we've covered in class.&lt;/p&gt;
&lt;h3 id="requirements"&gt;Requirements&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Choose a recent full length conference paper or journal article about any of the topics we've covered in class.&lt;ul&gt;
&lt;li&gt;Must be from the last two years.&lt;/li&gt;
&lt;li&gt;Must focus on one of the QA topics we've covered in class.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Send your choice of paper to the instructor &lt;strong&gt;by March 15th.&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;The instructor will approve or deny it based on its relevance to the course content, and the above requirements.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Read and understand the paper.&lt;ul&gt;
&lt;li&gt;If you've never done this kind of thing before, you may also need to take a look at least at the abstracts of the important works it cites, so that you have a full understanding of the context.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Present the paper to the class:&lt;ul&gt;
&lt;li&gt;a. Your presentation must be targeted to the audience, which is the undergrads who are in the class.&lt;/li&gt;
&lt;li&gt;b. Presentation should be at between 25-30 minutes, no more, no less.&lt;/li&gt;
&lt;li&gt;c. Presentation should cover all the aspects of the paper: background, research questions/hypothesis, experimental design, results, conclusions the authors drew about it.&lt;/li&gt;
&lt;li&gt;d. If you use diagrams or statements from the paper or other papers they must be cited.&lt;/li&gt;
&lt;li&gt;e. You can use PowerPoint or Google Slides or whatever presentation software you like.&lt;/li&gt;
&lt;li&gt;f. You will need to present in class.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You must be able to answer questions about the paper for 5-10 minutes afterwards:&lt;ul&gt;
&lt;li&gt;a. Even if the undergrads decide to skip class or not ask any questions, rest assured that I will be asking you questions.&lt;/li&gt;
&lt;li&gt;b. You are expected to attend each other's presentations and ask questions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="marking"&gt;Marking&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Timely proposal of research paper meeting the criteria is worth 1 mark.&lt;/li&gt;
&lt;li&gt;Presentation is marked by the below rubric (out of 5):&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Component&lt;/th&gt;
&lt;th&gt;Excellent (5)&lt;/th&gt;
&lt;th&gt;Good (4)&lt;/th&gt;
&lt;th&gt;Satisfactory (3)&lt;/th&gt;
&lt;th&gt;Unsatisfactory (2)&lt;/th&gt;
&lt;th&gt;Poor (1)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Slides&lt;/td&gt;
&lt;td&gt;Slides are clear, readable, and well-designed. Text is large enough to be seen from the back of the room. Figures are appropriately sized and labeled. No more than five bullet points per slide.&lt;/td&gt;
&lt;td&gt;Slides are mostly clear, readable, and well-designed. Text is large enough to be seen from most of the room. Figures are adequately sized and labeled. No more than seven bullet points per slide.&lt;/td&gt;
&lt;td&gt;Slides are somewhat clear, readable, and well-designed. Text is large enough to be seen from the front of the room. Figures are somewhat sized and labeled. No more than nine bullet points per slide.&lt;/td&gt;
&lt;td&gt;Slides are unclear, unreadable, or poorly designed. Text is too small to be seen from the back of the room. Figures are too large or too small and unlabeled. More than nine bullet points per slide.&lt;/td&gt;
&lt;td&gt;Slides are missing, illegible, or incomprehensible. Text is too small to be seen from anywhere in the room. Figures are irrelevant or absent. Too many bullet points per slide or no bullet points at all.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Organization&lt;/td&gt;
&lt;td&gt;Presentation has a clear introduction, body, and conclusion. Transitions between slides are smooth and logical. Main points are highlighted and supported by evidence.&lt;/td&gt;
&lt;td&gt;Presentation has an introduction, body, and conclusion. Transitions between slides are mostly smooth and logical. Main points are stated and supported by some evidence.&lt;/td&gt;
&lt;td&gt;Presentation has an introduction, body, and conclusion. Transitions between slides are somewhat smooth and logical. Main points are mentioned and supported by weak evidence.&lt;/td&gt;
&lt;td&gt;Presentation lacks a clear introduction, body, or conclusion. Transitions between slides are abrupt or illogical. Main points are unclear or unsupported by evidence.&lt;/td&gt;
&lt;td&gt;Presentation has no discernible structure or flow. Transitions between slides are nonexistent or confusing. Main points are missing or irrelevant.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Demonstration of knowledge&lt;/td&gt;
&lt;td&gt;Presenter demonstrates a thorough and accurate understanding of the research paper and its background. Presenter explains the research question, methods, results, and implications in detail and with confidence. Presenter cites relevant sources and acknowledges limitations.&lt;/td&gt;
&lt;td&gt;Presenter demonstrates a good understanding of the research paper and its background. Presenter explains the research question, methods, results, and implications with some detail and confidence. Presenter cites some sources and mentions limitations.&lt;/td&gt;
&lt;td&gt;Presenter demonstrates a basic understanding of the research paper and its background. Presenter explains the research question, methods, results, and implications with minimal detail and confidence. Presenter cites few sources and ignores limitations.&lt;/td&gt;
&lt;td&gt;Presenter demonstrates a poor understanding of the research paper and its background. Presenter fails to explain the research question, methods, results, or implications with any detail or confidence. Presenter cites no sources and makes false claims.&lt;/td&gt;
&lt;td&gt;Presenter demonstrates no understanding of the research paper and its background. Presenter does not explain the research question, methods, results, or implications at all. Presenter provides incorrect or misleading information.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ability to answer questions&lt;/td&gt;
&lt;td&gt;Presenter answers all questions from the audience correctly and confidently. Presenter provides additional information or examples when appropriate. Presenter is respectful and courteous to the questioners.&lt;/td&gt;
&lt;td&gt;Presenter answers most questions from the audience correctly and confidently. Presenter provides some additional information or examples when appropriate. Presenter is respectful and courteous to the questioners.&lt;/td&gt;
&lt;td&gt;Presenter answers some questions from the audience correctly and confidently. Presenter provides little additional information or examples when appropriate. Presenter is respectful and courteous to the questioners.&lt;/td&gt;
&lt;td&gt;Presenter answers few questions from the audience correctly and confidently. Presenter provides no additional information or examples when appropriate. Presenter is disrespectful or discourteous to the questioners.&lt;/td&gt;
&lt;td&gt;Presenter answers no questions from the audience correctly and confidently. Presenter provides irrelevant or inaccurate information or examples when appropriate. Presenter is rude or hostile to the questioners.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Audience comprehensibility&lt;/td&gt;
&lt;td&gt;Presenter uses appropriate language and terminology for the 402 students. Presenter defines and explains any unfamiliar terms or concepts. Presenter speaks clearly, loudly, and at a suitable pace. Presenter makes eye contact and uses gestures effectively.&lt;/td&gt;
&lt;td&gt;Presenter uses mostly appropriate language and terminology for the 402 students. Presenter defines and explains most unfamiliar terms or concepts. Presenter speaks clearly, loudly, and at a reasonable pace. Presenter makes some eye contact and uses gestures moderately.&lt;/td&gt;
&lt;td&gt;Presenter uses somewhat appropriate language and terminology for the 402 students. Presenter defines and explains some unfamiliar terms or concepts. Presenter speaks clearly, loudly, and at a fast or slow pace. Presenter makes little eye contact and uses gestures minimally.&lt;/td&gt;
&lt;td&gt;Presenter uses inappropriate language and terminology for the 402 students. Presenter does not define or explain any unfamiliar terms or concepts. Presenter speaks unclearly, softly, or at an unsuitable pace. Presenter makes no eye contact and uses gestures poorly.&lt;/td&gt;
&lt;td&gt;Presenter uses incomprehensible language and terminology for the 402 students. Presenter introduces or confuses unfamiliar terms or concepts. Presenter speaks inaudibly, unintelligibly, or at an erratic pace. Presenter avoids eye contact and uses gestures inappropriately.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Connection to class content&lt;/td&gt;
&lt;td&gt;Presenter shows how the research paper is relevant and important to the class content. Presenter relates the research paper to the course objectives, themes, and topics. Presenter provides examples or applications of the research paper to the class content.&lt;/td&gt;
&lt;td&gt;Presenter shows how the research paper is somewhat relevant and important to the class content. Presenter relates the research paper to some of the course objectives, themes, and topics. Presenter provides some examples or applications of the research paper to the class content.&lt;/td&gt;
&lt;td&gt;Presenter shows how the research paper is vaguely relevant and important to the class content. Presenter relates the research paper to few of the course objectives, themes, and topics. Presenter provides few examples or applications of the research paper to the class content.&lt;/td&gt;
&lt;td&gt;Presenter shows how the research paper is irrelevant or unimportant to the class content. Presenter does not relate the research paper to any of the course objectives, themes, and topics. Presenter provides no examples or applications of the research paper to the class content.&lt;/td&gt;
&lt;td&gt;Presenter shows how the research paper is contrary or detrimental to the class content. Presenter contradicts or misrepresents the course objectives, themes, and topics. Presenter provides incorrect or misleading examples or applications of the research paper to the class content.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="individual"></category><category term="individual"></category><category term="policy"></category><category term="grading"></category></entry><entry><title>Individual Assignment 3: Performance Assessment</title><link href="https://cmput402.github.io/individual/performance-assessment.html" rel="alternate"></link><published>2024-02-29T00:00:00-07:00</published><updated>2024-02-29T00:00:00-07:00</updated><author><name>Hazel Victoria Campbell</name></author><id>tag:cmput402.github.io,2024-02-29:/individual/performance-assessment.html</id><summary type="html">&lt;p&gt;Individual Assignment 3: Performance Assessment&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#performance-analysis-of-book-website"&gt;Performance analysis of book website&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#notes"&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#acceptance-criteria-for-i3"&gt;Acceptance criteria for I3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#useful-resources"&gt;Useful resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="overview"&gt;Overview&lt;/h3&gt;
&lt;p&gt;In this assignment, you will assess the performance of a given system and
reflect on how such assessment can be done effectively.&lt;/p&gt;
&lt;p&gt;The learning goals of I3 are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deciding which performance concerns are important for a system    &lt;/li&gt;
&lt;li&gt;Deciding between different approaches to performance assessment and understanding their limitations&lt;/li&gt;
&lt;li&gt;Learn how to use JMeter for load testing and performance assessment&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="performance-analysis-of-book-website"&gt;Performance analysis of book website&lt;/h3&gt;
&lt;p&gt;In this assignment, you are being asked to assess the performance of a web site
that can list and search book covers (with title, author, categories,
publication date, cover image, etc.), for which we provide a runnable (through
Docker Compose) setup in a &lt;a href="https://github.com/cmput402-w23/bookstore"&gt;GitHub repository&lt;/a&gt;
with about 800 book covers. This assignment intentionally gives you a lot of
flexibility in deciding what performance characteristics (e.g., throughput,
latency) are important and how they should be assessed. Make sure to assess
performance of all &lt;a href="https://github.com/cmput402-w23/bookstore#endpoints"&gt;endpoints&lt;/a&gt;.
Justify your decisions, conduct a reasonable performance assessment with
limited time, and discuss what additional steps you would take with more time.&lt;/p&gt;
&lt;p&gt;The main deliverable is a report (4 pages, max) which should cover the
following questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Performance concerns:&lt;/strong&gt; What are (likely) important performance concerns or
  requirements for the system? Justify your answer.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Measures:&lt;/strong&gt; How can those performance concerns be assessed? (define the
  measure, be clear about units, characterize how you would distinguish good
  from bad performance with this measure).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Measurement process:&lt;/strong&gt; What measurements did you conduct to collect the
  measures in the previous point and how? Justify your design (e.g., overall
  setup, workload selection) and describe your process briefly but with
  sufficient detail to reproduce it. You can attach screenshots of your JMeter
  test plan, if that helps.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Measurement results:&lt;/strong&gt; What were the results from your performance
  assessment? Discuss how well the system achieves the performance qualities.
  Include plots (charts, graphs, etc.) if they help your discussion of results.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Next steps:&lt;/strong&gt; If you had more time, what additional steps would you take
  for performance assessment of this system? Would you automate tasks or
  integrate them in the development process? Why/why not?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="notes"&gt;Notes&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Resource limits.&lt;/strong&gt; You might see resource limits set up in
&lt;code&gt;docker-compose.yml&lt;/code&gt; file. That is done on purpose. Do not modify the file,
otherwise the results might not be what we expect. You should only work with
JMeter and not change anything in the code. However, you are welcome to explore
the source code, as well as the data set, if you want to.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fatal errors&lt;/strong&gt;. It is possible that the application will crash due to too
heavy load.  That's an example of stress testing where your goal is to estimate
what is the maximum load that the system can handle before crashing. If you
experience this issue, try to determine what is the maximum load it can handle
before failing (e.g., number of requests) and mention that in the report. You
do not need to find the exact number (e.g., "1227 requests"), but try to be as
precise as possible (e.g., "about 1200 requests").&lt;/p&gt;
&lt;h3 id="acceptance-criteria-for-i3"&gt;Acceptance criteria for I3&lt;/h3&gt;
&lt;p&gt;Submit the report as a &lt;strong&gt;PDF&lt;/strong&gt; (max 4 pages including any screenshots, plots,
etc.) with clear subsections to eClass. Keep all sections under half a page if
possible, except for the process description, which might be longer and might
include additionally screenshots or scripts if that simplifies your
description.&lt;/p&gt;
&lt;p&gt;The following criteria must be satisfied for I3 to be accepted as complete.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;Criteria&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Grade&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Reasonable, comprehensive, and clearly justified performance goals.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Well defined performance measures.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Well described and reproducible measurement process.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Clearly described measurement results (in a form understandable by the target audience of your performance goals).&lt;/td&gt;
&lt;td style="text-align: left;"&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;A plausible discussion of next steps.&lt;/td&gt;
&lt;td style="text-align: left;"&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="useful-resources"&gt;Useful resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.guru99.com/jmeter-performance-testing.html"&gt;How to Use JMeter for Performance and Load Testing&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.blazemeter.com/blog/how-perform-stress-test-jmeter"&gt;How to Run a Stress Test in Jmeter&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.soapui.org/learn/load-testing/"&gt;API Load Testing Best Practices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="individual"></category><category term="individual"></category><category term="policy"></category><category term="grading"></category></entry><entry><title>Individual Assignment 1: Testing Theory</title><link href="https://cmput402.github.io/individual/testing-theory.html" rel="alternate"></link><published>2024-01-30T00:00:00-07:00</published><updated>2024-01-30T00:00:00-07:00</updated><author><name>Hazel Victoria Campbell</name></author><id>tag:cmput402.github.io,2024-01-30:/individual/testing-theory.html</id><summary type="html">&lt;p&gt;Individual Assignment 1: Testing Theory&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#submission"&gt;Submission&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#question-1-6-marks"&gt;Question 1 (6 marks)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#question-2-6-marks"&gt;Question 2 (6 marks)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#question-3-7-marks"&gt;Question 3 (7 marks)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#question-4-19-marks"&gt;Question 4 (19 marks)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="submission"&gt;Submission&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Please upload a &lt;strong&gt;pdf&lt;/strong&gt; on eClass.&lt;/li&gt;
&lt;li&gt;Please draw all diagrams using any program of your choice such that
    your TA can clearly read it.&lt;/li&gt;
&lt;li&gt;The assignment consists of 4 questions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="overview"&gt;Overview&lt;/h3&gt;
&lt;p&gt;The learning objectives of this assignment is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;develop equivalence classes&lt;/li&gt;
&lt;li&gt;gain experience in combinatorial testing&lt;/li&gt;
&lt;li&gt;identify states and transitions from a high-level description of a
    problem&lt;/li&gt;
&lt;li&gt;create simple control flow graphs&lt;/li&gt;
&lt;li&gt;calculate different types of coverage&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please note that it is important for you to understand how to solve the
problems in this assignment, as you will get similar types of problems
in the exams.&lt;/p&gt;
&lt;p&gt;The assignment is out of 38 marks.&lt;/p&gt;
&lt;h3 id="question-1-6-marks"&gt;Question 1 (6 marks)&lt;/h3&gt;
&lt;p&gt;You are evaluating a system that requires a user to login with a
"strong" password. The password must satisfy the following requirements:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Minimum length: 10 characters&lt;/li&gt;
&lt;li&gt;At least two uppercase characters&lt;/li&gt;
&lt;li&gt;At least one number&lt;/li&gt;
&lt;li&gt;At least one special symbol&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your goal is to combinatorially test the &lt;code&gt;resetPassword&lt;/code&gt; function:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boolean resetPassword (String newPwd);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;resetPassword&lt;/code&gt; function takes a string as an input and returns true
if the password meets the above requirements. If the password does not
meet stated requirements, then the new password is rejected and
&lt;code&gt;resetPassword&lt;/code&gt; returns false.&lt;/p&gt;
&lt;p&gt;To create concrete test cases for this function, you will decompose the
relevant dimensions of the password constraints. Use
&lt;a href="https://github.com/snadi/tslgenerator"&gt;TSLGenerator&lt;/a&gt; to help you
generate the test frames. Your steps are roughly as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Identify equivalence classes for the password inputs.&lt;/li&gt;
&lt;li&gt;Translate the specification from Step 1 to TSL's format and generate
    an all-pairs test specification.&lt;/li&gt;
&lt;li&gt;Identify inadmissable combinations or opportunities to reduce your
    test cases, flag them and adjust your constraints or classes, then
    regenerate tests.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that this process may require some iteration: you may want to use
the results of Step 3 to refine your inputs as generated from Steps 1
and 2.&lt;/p&gt;
&lt;p&gt;For this question, you must (1) describe your final equivalence classes
and constraints. (2) State how many tests TSL were initially generated
in Step 1 with no constraints and how many tests were finally generated
after iterating through the above steps. (3) list the final test frames
generated by the tool. (4) pick 3 test frames and create concrete test
cases for them (remember that test cases include input and output), (5)
Briefly (3-5 sentences), reflect on your experience in this process. Is
this something you would use again? Did it help you think about the
domain?&lt;/p&gt;
&lt;p&gt;(For concrete test cases, pseudocode is okay.)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hint: Note that this question does not have a single correct answer.
The goal is for you to think about criteria that make sense to partition
your domain into equivalence classes and what these equivalence classes
are. If you end up having too many test frames for such a simple problem
(e.g., 50-80), then perhaps think of further constraints that can help
you reduce this number.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="question-2-6-marks"&gt;Question 2 (6 marks)&lt;/h3&gt;
&lt;p&gt;For the following code, (a) provide a list of test cases that achieve
full branch coverage, keeping in mind that this is Java code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;{
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For the same code, (b) provide a list of test cases that achieves full
statement coverage, but not full branch coverage.&lt;/p&gt;
&lt;h3 id="question-3-7-marks"&gt;Question 3 (7 marks)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; A check-in machine is installed at an airport. A detailed
description of how to use this machine is as follows:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To use the check-in machine adhere to the following procedure:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You can choose to check in with your booking number or with your
    credit card:&lt;/p&gt;
&lt;p&gt;(a) You have chosen to check in with your booking number. Enter your
    number and click "Continue".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;The&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;machine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;validates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;booking&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;numbers&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ii&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;If&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;correct&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;machine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;goes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;iii&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;If&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;correct&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;machine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;goes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;able&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;again&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(b) You have chosen to check in with your credit card. Put your card
    into the machine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;The&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;machine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;validates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;card&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ii&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;If&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;card&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;accepted&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;machine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;goes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;iii&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;If&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;card&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;rejected&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;machine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;goes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You will now be prompted for the number of luggage items you want to
    check in. When you have entered the number, you click "Continue" and
    the machine goes to 3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You will now be asked if you want to reserve a seat or change an
    existing seat reservation (if you have already reserved a seat)&lt;/p&gt;
&lt;p&gt;(a) If you confirm, the machine goes to 4&lt;/p&gt;
&lt;p&gt;(b) If you do not confirm, the machine goes to 5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You choose an available seat and click "Continue". The machine goes
    to 5.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your boarding card will be printed out along with the luggage tags.
    When you have taken the boarding card and luggage tags, the machine
    goes to 6.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The machine wishes you an enjoyable flight, and goes back to 1.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;During interaction with the machine, you always have the possibility to
click "Cancel". If you do so, the machine will immediately go back to
1.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;(a) [4 marks] Draw a finite state machine (a.k.a state transition
    diagram) that shows how the machine works. Make sure to clearly
    label your states (e.g., with numbers 1, 2 etc), such that you can
    refer to them in the next question. Also, beside the graph, write
    the total number of nodes and transitions in your graph.&lt;/p&gt;
&lt;p&gt;(b) [1 mark] Write down a set of test cases, where each test case is a
    sequence of states (e.g., 1-&amp;gt;2-&amp;gt;3 etc), to achieve 100 percent
    state coverage.&lt;/p&gt;
&lt;p&gt;(c) [1 mark] What is the transition coverage of the test suite you
    created in (b)?&lt;/p&gt;
&lt;p&gt;(d) [1 mark] Is there any relationship between transition coverage and
    state coverage?&lt;/p&gt;
&lt;h3 id="question-4-19-marks"&gt;Question 4 (19 marks)&lt;/h3&gt;
&lt;p&gt;Consider the following method &lt;code&gt;isValidMove&lt;/code&gt; given below (&lt;em&gt;line numbers
shown for easier reference&lt;/em&gt;). It is based on the game
&lt;a href="https://bicyclecards.com/how-to-play/klondike/"&gt;Klondike&lt;/a&gt; where you
move cards around and the goal is to play move cards in way so that all
the cards end up in the suits where each of the four suits is a sequence
from Ace to King.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;isValidMove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cm"&gt;/* 1*/&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// A&lt;/span&gt;
&lt;span class="cm"&gt;/* 2*/&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Invalid: &amp;lt;from&amp;gt; and &amp;lt;to&amp;gt; both needs to be non-empty strings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cm"&gt;/* 3*/&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/* 4*/&lt;/span&gt;
&lt;span class="cm"&gt;/* 5*/&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stock&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isValidPileNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// B&lt;/span&gt;
&lt;span class="cm"&gt;/* 6*/&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Valid: stock to pile&amp;quot;&lt;/span&gt;
&lt;span class="cm"&gt;/* 7*/&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stock&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SUITS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// C&lt;/span&gt;
&lt;span class="cm"&gt;/* 8*/&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Valid: stock to suit&amp;quot;&lt;/span&gt;
&lt;span class="cm"&gt;/* 9*/&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isValidPileNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// D&lt;/span&gt;
&lt;span class="cm"&gt;/*10*/&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isValidPileNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SUITS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// E&lt;/span&gt;
&lt;span class="cm"&gt;/*11*/&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Invalid: &amp;lt;to&amp;gt; value is invalid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cm"&gt;/*12*/&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/*13*/&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Valid: pile to (pile or suit)&amp;quot;&lt;/span&gt;
&lt;span class="cm"&gt;/*14*/&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="cm"&gt;/*15*/&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Invalid &amp;lt;from&amp;gt; or &amp;lt;to&amp;gt; value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Helper variables and methods &lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SUITS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Arrays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;h&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;isValidPileNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NumberFormatException&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(a) [4 marks] Draw a fully labelled control-flow graph for the method
    &lt;code&gt;isValidMove&lt;/code&gt;. You may use the labels A - E shown in the code to
    label predicates in the graph. For easier traceability for us when
    marking, please use the line numbers in the code to label nodes in
    your graph.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Please note that the method &lt;code&gt;isValidPileNumber&lt;/code&gt; and the variable
&lt;code&gt;SUITS&lt;/code&gt; are provided to help you understand the logic, and they are not
be a part of the control-flow graph.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;(b) [1 mark] Obtaining a 100% statement (a.k.a node) coverage requires
    (at least) six tests on this graph. Explain why.&lt;/p&gt;
&lt;p&gt;(c) [9 marks] Provide six tests (as calls to &lt;code&gt;isValidMove(from, to)&lt;/code&gt;)
    that satisfy 100% statement coverage on this graph. Make your tests
    short. You need to include assert statements in your test to
    indicate the expected output, or put a comment to clearly indicate
    what the expected output of this test is. &lt;strong&gt;For each test, indicate
    the path it covers.&lt;/strong&gt; For easier readability, please follow the
    following template for specifying your concrete tests.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;!--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;//ADD COVERED PATH AS A COMMENT&lt;/span&gt;
&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;EXPECTED&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isValidMove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FROM&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;TO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(d) [5 marks] Identify the conditions in this program and create a
    test suite with 100% MC/DC coverage. For each test case, provide
    concrete values for the &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; parameters. You &lt;strong&gt;must&lt;/strong&gt;
    show your intermediate work and how you arrived to your answer.
    Final answers only will not get a grade.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hint: for each branch in the program, break it down into its
conditions, then create the MC/DC table for each branch predicate.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Copyright 2021, 2022 Dr. Sarah Nadi. Copyright 2023, 2024 Dr. Hazel Campbell. All rights reserved.&lt;/p&gt;</content><category term="individual"></category><category term="individual"></category><category term="policy"></category><category term="grading"></category></entry><entry><title>Individual Assignment 2: Testing with Mocks</title><link href="https://cmput402.github.io/individual/testing-mocks.html" rel="alternate"></link><published>2024-01-30T00:00:00-07:00</published><updated>2024-01-30T00:00:00-07:00</updated><author><name>Hazel Victoria Campbell</name></author><id>tag:cmput402.github.io,2024-01-30:/individual/testing-mocks.html</id><summary type="html">&lt;p&gt;Individual Assignment 2: Testing with Mocks&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#learning-goals"&gt;Learning Goals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#task-unit-test-functionalities-of-a-desktop-application"&gt;Task: Unit test functionalities of a desktop application&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#step-1-interesting-information"&gt;Step 1: Interesting Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-5-dont-exist-in-the-code-at-all-yet-you-need-to-add-the-functionality-yourself"&gt;2-5 don't exist in the code at all yet. You need to add the functionality yourself.&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#step-2-robustness-tactic"&gt;Step 2: Robustness Tactic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#deliverables"&gt;Deliverables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#requirements-and-restrictions"&gt;Requirements and Restrictions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#grading"&gt;Grading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hints"&gt;Hints&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="overview"&gt;Overview&lt;/h3&gt;
&lt;p&gt;Most parts of software systems do not work in isolation and are difficult to test when the environment changes. Rather, these parts collaborate with multiple components to perform tasks that we want to implement and test. Various forms of mocks, stubs, fakes and other objects are used in many forms of testing to simulate the behavior of real objects that our implementation depends on to perform a specific task. One of the benefits of mocking dependencies is that we can focus on testing our implementation given that we have obtained the information that we expected from those dependencies. Furthermore, it allows to simulate error conditions in the environment and thus to test a system for robustness. In this assignment, you will test a desktop application by mocking a network service.&lt;/p&gt;
&lt;h3 id="learning-goals"&gt;Learning Goals&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Apply mocking testing tools and techniques.&lt;/li&gt;
&lt;li&gt;Overcome mocking difficulties caused by conflicting tools.&lt;/li&gt;
&lt;li&gt;Unit test functionalities of a desktop application that depends on a network service&lt;/li&gt;
&lt;li&gt;Design test cases to assess robustness of error handling implementations&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resources"&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Github API &lt;a href="https://github-api.kohsuke.org/"&gt;https://github-api.kohsuke.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mockito API &lt;a href="https://site.mockito.org/"&gt;https://site.mockito.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;EasyMock API &lt;a href="http://easymock.org/"&gt;http://easymock.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create your repository by accessing &lt;a href="https://classroom.github.com/a/P6dDMwhK"&gt;the GitHub classroom assignment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="task-unit-test-functionalities-of-a-desktop-application"&gt;Task: Unit test functionalities of a desktop application&lt;/h3&gt;
&lt;p&gt;You are developing a GitHub dataminer in Java. Your application will automate a few data gathering tasks on GitHub that may be of interest, such as finding out what day of the week (Monday, Tuesday, etc.) someone makes the most commits on. The current code is really basic and you are allowed to extend it. When developing your miner, you realize that interacting with the GitHub API is not simple as you expected. You need to obtain a token for interacting with the API. Also you do not want to run into API limits due to your tests running too often. You want to test whether your application could handle network connections gracefully. Primarily, you want to test the logic of your application and your error handling mechanisms, assuming you have already interacted with GitHub and received some response from the API. &lt;strong&gt;Your goal in this assignment is to mock the &lt;a href="https://github-api.kohsuke.org/"&gt;Java GitHub API&lt;/a&gt; dependency to test your implementation and its robustness.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The starter code contains some basic functionality for a GitHub miner. Extend the miner as described below and automate testing of the functionality of your miner without actually interacting with the real GitHub API. &lt;strong&gt;In the process, you may need to modify the existing source code to make the project testable (e.g., private methods cannot be tested and static method calls cannot be mocked).&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id="step-1-interesting-information"&gt;Step 1: Interesting Information&lt;/h4&gt;
&lt;p&gt;The application must determine the following information:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What day of the week you make the most git commits on.&lt;/li&gt;
&lt;li&gt;What is the average time between commits&lt;/li&gt;
&lt;li&gt;How long do issues on your repos stay open for, on average (consider only closed issues)&lt;/li&gt;
&lt;li&gt;How long do pull requests on your repos stay open for, on average&lt;/li&gt;
&lt;li&gt;How many branches do your repos have, on average&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There is some code provided to help you get started with #1, but you should improve the code.&lt;/p&gt;
&lt;h3 id="2-5-dont-exist-in-the-code-at-all-yet-you-need-to-add-the-functionality-yourself"&gt;2-5 don't exist in the code at all yet. You need to add the functionality yourself.&lt;/h3&gt;
&lt;p&gt;Test each of these functionalities without actually communicating with the GitHub servers.
Your code should only communicate with the GitHub servers if Main is run normally, outside of tests. You do not need to test the Main function of the miner, just the functions that abstract the above mining functionality.&lt;/p&gt;
&lt;h4 id="step-2-robustness-tactic"&gt;Step 2: Robustness Tactic&lt;/h4&gt;
&lt;p&gt;In addition to the above functionally, you need to improve the error handling mechanism of the application. Instead of the application crashing with some error if a task could not be completed, you need to retry 3 times before gracefully reporting an error message. You will need to test that this robustness tactic actually works as expected. &lt;/p&gt;
&lt;p&gt;We recommend to add this robustness tactic to all interactions with the GitHub API, &lt;strong&gt;but for this assignment, it is sufficient to implement and test it for a single function of your choice.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="deliverables"&gt;Deliverables&lt;/h3&gt;
&lt;p&gt;Submit your solution as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All the code of implementation and tests regarding both steps should be in your GitHub classroom individual repo; tests should be executed automatically with Gradle.&lt;/li&gt;
&lt;li&gt;Submit a short report with explicit subsections (&amp;lt; 2 pages, hard limit) as a single PDF to eClass, describing the design decisions that you made to enable testing. Specifically: 
    a.  Describe which elements you chose to mock and why and where mocking was not necessary or useful.
    b.  Describe how you refactored the code to make it easier to test.
    c.  Explicitly mention which function you chose to implement robustness for and describe how you assessed that your testing w.r.t robustness is adequate.
    d.  If you had more time and resources, would you propose additional changes to make testing easier?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Please indicate your repo url in your report&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="requirements-and-restrictions"&gt;Requirements and Restrictions&lt;/h3&gt;
&lt;p&gt;You must follow good testing practice.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You must actually test the code that you are trying to test.&lt;/li&gt;
&lt;li&gt;You should not mock your own code (with the exception of unavoidable wrapper classes: see Hints section below).&lt;ul&gt;
&lt;li&gt;You should only be mocking the API provided by the "github-api" package.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;All methods and classes in your production code should be in use by the production code.&lt;ul&gt;
&lt;li&gt;Do not add special methods, constructors, or classes that are only ever called by your testing code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="grading"&gt;Grading&lt;/h3&gt;
&lt;p&gt;Tota: 35 marks&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Step 1 (15 marks, 3 for each functionality)&lt;/li&gt;
&lt;li&gt;Step 2 (10 marks, 5 for adding robustness + 5 for testing it)&lt;/li&gt;
&lt;li&gt;Report (10 marks)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="hints"&gt;Hints&lt;/h3&gt;
&lt;p&gt;You will need to change private visibility to protected visibility in order to access them from your testing code. &lt;/p&gt;
&lt;p&gt;Mockito and github-api both use Java bytecode manipulation. Mockito does this to help inject dependencies. However, this can come into conflict with methods in the github-api that are decorated with &lt;code&gt;@WithBridgeMethods&lt;/code&gt;. One example is the &lt;code&gt;GHIssue.comment&lt;/code&gt; method. This can result in an error like &lt;code&gt;Date cannot be returned by getCreatedAt() getCreatedAt() should return String&lt;/code&gt;. This error message doesn't really make sense because the application bytecode was manipulated &lt;em&gt;after&lt;/em&gt; being compiled. In order to solve this, you will need to create a wrapper for &lt;code&gt;GHIssue&lt;/code&gt;, use the wrapper in the production code, and then mock the wrapper instead of the wrapper class from github-api in the test code. You will also need to do this for any other methods that are decorated with &lt;code&gt;@WithBridgeMethods&lt;/code&gt; in the &lt;a href="https://github.com/hub4j/github-api/tree/main/src/main/java/org/kohsuke/github"&gt;github-api code&lt;/a&gt;. So if you get a strange error with impossible types, check the code of github-api to see if it uses such a decorator, and add a wrapper class as needed. This is not the only way to solve this problem, but it's the easiest way we've found so far. &lt;em&gt;Wrapper classes shouldn't do anything but just call the class they are wrapping.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Usually you should avoid modifying the production code to add wrappers that are only necessary for the test code to work. However, in this case it is unavoidable becuase the methods mockito and the github-api code use are in conflict. Similar conflicts can also arise in other programming languages such as Python.&lt;/p&gt;
&lt;p&gt;Keep in mind that there are many different ways to solve everything in this assignment. For example, mockito has &lt;code&gt;@&lt;/code&gt; decorators that can make your code a lot cleaner than the provided sample code.&lt;/p&gt;
&lt;p&gt;You can use the &lt;code&gt;try (MockedConstrcution&lt;/code&gt; pattern to intercept any constructor. This is using a Java feature called &lt;a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html"&gt;try-with-resources&lt;/a&gt;. But its not necessary to do unless the "new" you're trying to intercept is in the production code (or somewhere inside of github-api). For any constructors called in the testing code, you can just &lt;code&gt;mock(Whatever.class)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Copyright 2021, 2022 Dr. Sarah Nadi. Copyright 2023, 2024 Dr. Hazel Campbell. All rights reserved.&lt;/p&gt;</content><category term="individual"></category><category term="individual"></category><category term="policy"></category><category term="grading"></category></entry></feed>